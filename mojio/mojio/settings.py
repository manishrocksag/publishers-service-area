"""
Django settings for mojio project.

Generated by 'django-admin startproject' using Django 1.8.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'nmbiu(29slcq0-0*=6u^rcku)1a@bm0t2tt0n6t#5u^mb67-y)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

PREREQ_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    # For the REST API
    'rest_framework',
    # Placed after rest_api to allow template overriding
    'rest_framework_swagger',
    # Used to get the JsonField class
    'django_mysql',
]

PROJECT_APPS = [
    "modules.publishers",
    "modules.servicearea",
]

INSTALLED_APPS = PREREQ_APPS + THIRD_PARTY_APPS + PROJECT_APPS

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'mojio.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mojio.wsgi.application'



REST_FRAMEWORK = {
    # Parser classes priority-wise for Swagger
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.JSONParser',
    ],
}


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    },
    'prod': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('MOJIO_DB_NAME', 'mojio'),
        'USER': os.getenv('MOJIO_WEBAPP_DB_USER', 'root'),
        'PASSWORD': os.getenv('MOJIO_DB_PASSWORD', 'root'),
        'HOST': os.getenv('MOJIO_DB_HOST', 'localhost'),
        'PORT': os.getenv('MOJIO_DB_PORT', ''),
        'OPTIONS': {
            # Tell MySQLdb to connect with 'utf8mb4' character set
            'charset': 'utf8mb4',
        },
    },
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

# Cache settings ############################################################################
# Do not use cache on `Local`. Use it everywhere else.
USE_CACHE = os.getenv('USE_CACHE', 'False')

# If USE_CACHE, point to actual MEMCACHE instance or point to LocMemCache
CACHE_OPTIONS = USE_CACHE and {
    'BACKEND': 'django_elasticache.memcached.ElastiCache',
    'LOCATION': '%s:11211' % os.getenv('MEMCACHE_NODE_IP'),
    # No defaults for memcache_node_ip because it shouldn't be used on local
} or {
    'BACKEND': 'django.core.cache.backends.locmem.LocMemCache'
}

CACHES = {
    'default': CACHE_OPTIONS,
    'staticfiles': CACHE_OPTIONS,
    'socketcontext': CACHE_OPTIONS
}

# Django-user-agents settings #################################################################
# Set the user agent cache to None on `local`

if USE_CACHE:
    USER_AGENTS_CACHE = 'default'
else:
    USER_AGENTS_CACHE = None


# Logging settings #############################################################################

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'json': {
            'format': '{ "loggerName":"%(name)s", "asciTime":"%(asctime)s", "fileName":"%(filename)s", '
                      '"logRecordCreationTime":"%(created)f", "functionName":"%(funcName)s", "levelNo":"%(levelno)s", '
                      '"lineNo":"%(lineno)d", "time":"%(msecs)d", "levelName":"%(levelname)s", "message":"%(message)s"}',
        },
    },

    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },

    'handlers': {
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.WatchedFileHandler',
            'filename': os.path.join(os.getenv('WEBAPP_LOG_LOCATION', '/var/log/mojio/mojio'), 'django_logs', 'entire_system.log'),
            'formatter': 'verbose',
        },
        'request_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.WatchedFileHandler',
            'filename': os.path.join(os.getenv('WEBAPP_LOG_LOCATION', '/var/log/mojio'), 'django_logs', 'django_request.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'apphandler':  {
            'level': 'DEBUG',
            'class': 'logging.handlers.WatchedFileHandler',
            'filename': os.path.join(os.getenv('WEBAPP_LOG_LOCATION', '/var/log/mojio/mojio'), 'django_logs', 'apps.log'),
            'formatter': 'verbose',
        }
    },

    'root': {
        'handlers': ['default'],
        'level': 'DEBUG'
    },

    'loggers': {
        'django.request': {
            'handlers': ['request_handler'],
            'level': 'DEBUG',
            'propagate': True
        },
        'py.warnings': {
            'handlers': ['console'],
        },
        'apps.logs': {
            'handlers': ['apphandler'],
            'level': 'DEBUG',
            'propagate': True
        }
    }
}

